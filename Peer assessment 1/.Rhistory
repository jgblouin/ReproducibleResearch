dat<-within(dat,datetime<-strptime(paste(dat$Date, dat$Time, sep=" "), format="%d/%m/%Y %H:%M:%S"))
##Create the plot.
##Create the png file plot4.R.
png(filename="plot4.png",width = 480, height = 480)
##Create the plotting area as a 2*2 matrix.
##Plots will be added by row.
par(mfrow=c(2,2))
##1st plot is the same as plot2.
##Define the plotting area.
plot(x=dat$datetime,y=dat$Global_active_power,type="n",main=" ",xlab="",ylab="Global Active Power")
##Insert lines between data points.
lines(dat$datetime,dat$Global_active_power)
##2nd plot is a voltage/datetime plot.
##Define the plotting area.
plot(x=dat$datetime,y=dat$Voltage,type="n",xlab="datetime",ylab="voltage")
##Insert lines between data points.
lines(dat$datetime,dat$Voltage)
##3rd plot is the same as plot3.
##Define the plotting area.
plot(x=dat$datetime,y=dat$Sub_metering_1,type="n",main=" ",xlab="",ylab="Energy sub metering")
##Insert the 3 separate lines joining the points for Sub_metering 1,2,3.
##Sub_metering_1:
lines(dat$datetime,dat$Sub_metering_1,col="black")
##Sub_metering_2:
lines(dat$datetime,dat$Sub_metering_2,col="red")
##Sub_metering_3:
lines(dat$datetime,dat$Sub_metering_3,col="blue")
##Add the legend in the top right.
legend("topright",legend=c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("black","red","blue"),lty=1,bty="n")
##4th plot is a Global_reactive_power/Datetime graph, quite similar to plot2.
##Define the plotting area.
plot(x=dat$datetime,y=dat$Global_reactive_power,type="n",main=" ",xlab="datetime",ylab="Global_reactive_power")
##Insert lines between data points.
lines(dat$datetime,dat$Global_reactive_power)
dev.off()
library(datasets)
with(airquality, plot(Wind, Ozone))
?transform
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue",pch=20))
?Devices
x<-rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
z<-rnorm(100)
plot(x,z)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x,y,pch=20)
title("Scatterplot")
text(-2,-2,"Label")
legend("topleft",legend="Data")
legend("topleft",legend="Data",pch=20)
fit<-lm(y~x)
abline(fit)
abline(fit,lwd=3)
abline(fit,lwd=3, col="blue")
plot(x,y,xlab="Weight",ylab="Height",main="Scatterplot",pch=20)
legend("topright",legend="Data",pch=20)
fit<-lm(y~x)
abline(fit,lwd=3, col="red")
z<-rpois(100,2)
par(mfrow=c(2,1))
plot(x,y,pch=20) ##x-y plot goes on the top.
plot(x,z,pch=19)
par("mar")
par(mar=c(2,2,1,1))
plot(x,y,pch=20)
plot(x,z,pch=20)
par(mfrow=c(1,2)) ##One row with 2 columns.
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mar=c(4,4,2,2)) ##Resize the margins, then print the plots again.
plot(x,y,pch=20)
plot(x,z,pch=20)
par(mfrow=c(2,2)) ##Puts 4 plots on the same canvas, as a 2*2 array.
plot(x,y)
plot(x,z) ##Since mfrow was specified, the 2nd plot goes in the upper right.
plot(z,x) ##Lower left
plot(y,x)
x<-rnorm(100)
y<-x+rnorm(100)
?gl
g<-gl(2,50, labels=c("Male","Female"))
str(g)
plot(x,y)
plot(x,y,type="n")
points(x[g=="Male"],y[g=="Male"],col="green")
points(x[g=="Female"],y[g=="Female"],col="blue")
points(x[g=="Female"],y[g=="Female"],col="blue",pch=19)
install.packages("lattice")
library("ggplot2", lib.loc="~/R/win-library/3.1")
library("lattice", lib.loc="~/R/win-library/3.1")
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
?transform
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
p <- xyplot(Ozone ~ Wind, data = airquality)
p <- xyplot(Ozone ~ Wind, data = airquality)
p
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
f
?rep
y <- x + f - f * x + rnorm(100, sd = 0.5)
y
f <- factor(f, labels = c("Group 1", "Group 2"))
f
xyplot(y ~ x | f, layout = c(2, 1))
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call default panel function
panel.lmline(x, y, col = 2) ## Overlay a simple linear regression line
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call default panel function
panel.lmline(x, y, col = 2) ## Overlay a simple linear regression line
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call default panel function
panel.lmline(x, y, col = 2) ## Overlay a simple linear regression line
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
detach("package:lattice", unload=TRUE)
detach("package:RMySQL", unload=TRUE)
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"))
qplot(hway,data=mpg,fill=drv)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,
hwy,
data
=
mpg,
facets
=
.
~
drv)
qplot(displ,hwy, data= mpg,facets = drv ~.)
qplot(hwy,
data
=
mpg,
facets
=
drv
~
.,
binwidth
=
2)
qplot(hwy,
data
=
mpg,
facets
=
drv
~
.,
binwidth
=
4)
?qplot
?binwidth
??binwidth
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(nlme)
?nlme
?text
?par
?trellis.par.set
?splom
?print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?axis
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lattice
library("lattice", lib.loc="~/R/win-library/3.1")
?lines
?lattice
?panel
??panel
install.packages("RColorBrewer")
source("http://bioconductor.org/biocLite.R")
biocLite
()
biocLite()
biocLite("impute")
NEI <- readRDS("summarySCC_PM25.rds")
getwd()
setwd("/data.Data Visualization/Assgn.2")
setwd("~/data.Data Visualization/Assgn.2")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
str(NEI)
str(SCC)
str(SEI)
str(NEI)
summary(NEI)
data <- aggregate(NEI$Emissions, by = list(NEI$year), FUN = sum)
head(data)
data
png("plot1.png")
plot(data, type = "l", main = "Total Emissions in the US", xlab = "Year", ylab = expression("PM" [2.5]~~ "emitted(tons)"))
dev.off()
baltimore <- subset(NEI, fips == 24510)
baltimore
dataBaltimore <- aggregate(baltimore$Emissions, by = list(NEI$year), FUN = sum)
dataBaltimore <- aggregate(baltimore$Emissions, by = list(baltimore$year), FUN = sum)
dataBaltimore
png("plot2.png")
plot(dataBaltimore, type = "l", main = "Total Emissions in the US", xlab = "Year", ylab = expression("PM" [2.5]~~ "emitted(tons)"))
dev.off()
library(ggplot2)
##Retrieve data for Baltimore.fips =="24510"
baltimore <- subset(NEI, fips == 24510)
##Sum the emission data by year for Baltimore.
dataBaltimore <- aggregate(baltimore$Emissions, by = list(baltimore$year), FUN = sum)
ggplot(baltimoredata, aes(Group.1, x)) + geom_line() + facet_grid(. ~ Group.2) + labs(x = "Year", y = expression("PM" [2.5] ~ "Emitted (tons)"))
dev.off()
png("plot3.png")
ggplot(dataBaltimore, aes(Group.1, x)) + geom_line() + facet_grid(. ~ Group.2) + labs(x = "Year", y = expression("PM" [2.5] ~ "Emitted (tons)"))
dev.off()
png("plot3.png")
ggplot(dataBaltimore, aes(Group.1, x)) + geom_line() + facet_grid(. ~ Group.2) + labs(x = "Year", y = expression("PM" [2.5] ~ "Emitted (tons)"))
dev.off()
dataBaltimore <- aggregate(baltimore$Emissions, by = list(baltimore$year,baltimore$type), FUN = sum)
png("plot3.png")
ggplot(dataBaltimore, aes(Group.1, x)) + geom_line() + facet_grid(. ~ Group.2) + labs(x = "Year", y = expression("PM" [2.5] ~ "Emitted (tons)"))
dev.off()
head(scc)
head(SCC)
str(SCC)
summary(SCC)
summary(NEI)
summary(SCC)
str|(SCC)
str(SCC)
head(SCC)
summary(SCC)
head(SCC)
str(SCC)
head(SCC)
head(SCC)
sccCoal <- scc[scc$EI.Sector == "Fuel Comb - Electric Generation - Coal" |
scc$EI.Sector == "Fuel Comb - Comm/Institutional - Coal" |
scc$EI.Sector == "Fuel Comb - Industrial Boilers, ICEs - Coal",]
SCCCoal <- SCC[SCC$EI.Sector == "Fuel Comb - Electric Generation - Coal" |
SCC$EI.Sector == "Fuel Comb - Comm/Institutional - Coal" |
SCC$EI.Sector == "Fuel Comb - Industrial Boilers, ICEs - Coal",]
head(SCCCoal)
SCCCoalNames <- unique(SCCCoal$SCC)
SCCCoalNames
coal <- NEI[NEI$SCC %in% SCCCoalNames, ]
coal
head(coal)
coaldata <- aggregate(coal$Emissions, by = list(coal$year), FUN = sum)
coaldata
dataCoal <- aggregate(coal$Emissions, by = list(coal$year), FUN = sum)
png("plot4.png")
ggplot(dataCoal, aes(Group.1, x)) + geom_line() + labs(title = "Emissions from Coal", x = "Year", y = expression("PM" [2.5] ~ "Emitted (tons)"))
dev.off()
##Retrieve data for Baltimore.fips =="24510"
baltimore <- subset(NEI, fips == 24510)
head(baltimore)
summary(baltimore)
head(baltimore)
summary(baltimore)
baltimoreVehicles <- baltimore[baltimore$type == "ON-ROAD", ]
baltimoreVehicles
dataBaltimoreVehicle<- aggregate(baltimoreVehicles$Emissions, by = list(baltimoreVehicless$year), FUN = sum)
dataBaltimoreVehicle<- aggregate(baltimoreVehicles$Emissions, by = list(baltimoreVehicles$year), FUN = sum)
dataBaltimoreVehicle
png("plot5.png")
ggplot(dataBaltimoreVehicle, aes(Group.1, x)) + geom_line() + labs(title = "Emissions from Baltimore Motor Vehicles", x = "Year", y = expression("PM" [2.5] ~ "Emitted (tons)"))
dev.off()
bla <- NEI[NEI$fips == "24510" | NEI$fips == "06037", ]
blaVehicles<- bla[bla$type == "ON-ROAD", ]
blaData<- aggregate(blaVehicles$Emissions, by = list(blaVehicles$year, blaVehicles$fips), FUN = sum)
head(blaData)
blaData$Group.2 <- factor(blaData$Group.2, labels = c("Los Angeles", "Baltimore"))
head(blaData)
blaData
png("plot6.png")
ggplot(blaData, aes(Group.1, x, colour = Group.2)) +
geom_line() +
labs(title = "Motor Vehicle Emissions for Los Angeles and Baltimore", x = "Year", y = expression("Change in PM" [2.5] ~ "Emitted (tons)")) +
theme(legend.title = element_blank())
dev.off()
head(SCC)
head(NEI)
install.packages("kernlab")
install(kerbnlab)
install.packages(kernlab)
install.packages("kernlab")
library("kernlab", lib.loc="~/R/win-library/3.1")
data(spam)
str(spam[,1:5])
install.packages("ProjectTemplate")
install.package("ProjectTemplate")
install.packages("ProjectTemplate")
install.packages("Hmisc")
?predict
?rep
?predict
?rep
install.packages("xtable")
?opts_chunk
detach("package:RMySQL", unload=TRUE)
sessionInfo()
asctivityData<-read.csv("./Reproducible Research/Peer assesdsment 1/Data/activity.csv")
activityData<-read.csv("./Reproducible Research/Peer assessment 1/Data/activity.csv")
head(activityData)
activityData<-read.csv("./Reproducible Research/Peer assessment 1/Data/activity.csv")
head(activityData)
activityData
head(activityData)
getwd()
head(activityData,20)
head(activityData,100)
summary(acvtivityData)
summary(activityData)
activityDataTable<-data.table(activityData)
load(data.table)
load("data.table")
package(data.table)
library(data.table)
head(data.table)
head(activityDataTable)
activityDataTable<-data.table(activityData)
head(activityDataTable)
activityDataTable[, date := as.Date(date)]
head(activityDataTable)
library("knitr", lib.loc="~/R/win-library/3.1")
activityData<-read.csv("C:/Users/SUPER JG/Documents/Coursera Data Science/ReproducibleResearch/Peer assessment 1/Data/activity.csv")
head(activityData)
summary(activityData)
str(activityData)
library(data.table)
activityDataTable<-data.table(activityData)
activityDataTable[, date := as.Date(date)]
dailySteps<-activityDataTable[,list(totalsteps=sum(steps))]
dailySteps
head(activityDataTable)
dailySteps<-activityDataTable[,list(totalsteps=sum(steps)),date]
head(dailySteps)
dailySteps
ggplot(dailySteps,aes(x=totalsteps))
library(ggplot2)
ggplot(dailySteps,aes(x=totalsteps))
ggplot(dailySteps,aes(x=totalsteps)) + geom_histogram(alpha = 1/2, binwidth = 1000)
temp<-dailySteps[,list(n = .N, nValid = sum(!is.na(sumSteps)), mean = mean(sumSteps,                                                                        na.rm = TRUE), median = median(totalsteps, na.rm = TRUE))]
temp<-dailySteps[,list(n = .N, nValid = sum(!is.na(sumSteps)), mean = mean(totalsteps,                                                                      na.rm = TRUE), median = median(totalsteps, na.rm = TRUE))]
temp<-dailySteps[,list(n = .N, nValid = sum(!is.na(totalsteps)), mean = mean(totalsteps,                                                                      na.rm = TRUE), median = median(totalsteps, na.rm = TRUE))]
temp
library(xtable)
?xtable
print(xtable(medMean))
medMean<-dailySteps[,list(n = .N, nValid = sum(!is.na(totalsteps)), mean = mean(totalsteps,na.rm = TRUE), median = median(totalsteps, na.rm = TRUE))]
print(xtable(medMean))
print(xtable(medMean,type="html"))
print(xtable(medMean),type="html")
table<-xtable(medMean)
table
medMean<-dailySteps[,list(n = .N, nValid = sum(!is.na(totalsteps)), mean = mean(totalsteps,na.rm = TRUE), median = median(totalsteps, na.rm = TRUE))]
medMEan
medMean
xtable(medMean)
table<-xtable(medMean)
print(table,type="html", include.rownames = FALSE)
library(datasets)
data(airquality)
fit<-lm(Ozone~Wind+Temp+Solar.R,data=airquality)
detach("package:DBI", unload=TRUE)
detach("package:RMySQL", unload=TRUE)
xt<-xtable(summary(fit))
print(xt,type="html")
dailyStepsNoImputed<-dailySteps[, `:=`(status, "Before imputation")]
dailyStepsNoImputed
head(activityDataTable)
ADTIntervals<-activityDataTable[,list(meanSteps=mean(steps,na.rm=TRUE),interval]
ADTIntervals<-activityDataTable[,list(meanSteps=mean(steps,na.rm=TRUE)),interval]
ADTIntervals
ggplot(ADTIntervals,aes(x=intervals,y=average number of steps))
ggplot(ADTIntervals,aes(x=intervals,y=averageSteps))
ggplot(ADTIntervals,aes(x=intervals,y=averageSteps))-geom_line()
ggplot(ADTIntervals,aes(x=intervals,y=averageSteps))+geom_line()
ggplot(ADTIntervals,aes(x=interval,y=meanSteps))+geom_line()
maximum(ADTIntervals)
max(ADTIntervals)
head(ADTIntervals)
max(ADTIntervals$meanSteps)
maxStep<-max(ADTIntervals$meanSteps)
maxInt<-ADTIntervals[,ADTIntervals$meanSteps=maxStep]
maxInt<-ADTIntervals[,ADTIntervals$meanSteps==maxStep]
maxInt
maxInt<-ADTIntervals[,ADTIntervals$meanSteps==maxStep]$interval
head(ADTIntervals)
maxStep<-max(ADTIntervals$meanSteps)
masXtep
> masXtep
maxStep
?which
which(ADTIntervals$meanSteps==maxStep)
ADTIntervals[104]
ADTIntervals[which(ADTIntervals$meanSteps==maxStep)]
ADTIntervals$interval[which(ADTIntervals$meanSteps==maxStep)]
head(activityDataTable)
sum(is.na(activityDataTable$step))
head(activityDataTable,50)
activityDataTable[255]
activityDataTable[835]
install.packages("VIM")
library("VIM", lib.loc="~/R/win-library/3.1")
detach("package:VIM", unload=TRUE)
library(VIM)
activityDataTable
imputedActivity<-kNN(activityDataTable)
head(imputeActivity)
head(imputedActivity)
tail(imputedSteps)
tail(imputedActivity)
imputedActivity
sum(is.na(imputedActivity$step))
suppresswarnings(sum(is.na(imputedActivity$step)))
suppressWarnings(sum(is.na(imputedActivity$step)))
dailySteps<-imputedActivity[,list(totalsteps=sum(steps)),date]
dailyStepsImputed<-imputedActivity[,list(totalsteps=sum(steps)),date]
head(dailyStepsImputed)
ggplot(dailyStepsImputed,aes(x=totalsteps)) + geom_histogram(alpha = 1/2, binwidth = 1000)
medMeanImputed<-dailyStepsImputed[,list(n = .N, nValid = sum(!is.na(totalsteps)), mean = mean(totalsteps,na.rm = TRUE), median = median(totalsteps, na.rm = TRUE))]
medMean
medMeanImputed
dailyStepsImputed
medMeanImputed
medMean
medMean - medMeanImputed
dayLevels<-c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
"Saturday")
dayLevels
weekLevels<-c("Weekend", rep("Weekday", 5), "Weekend")
weekLevels
imputedActivity1<-imputedActivity[, `:=`(dayOfWeek, factor(weekdays(date), levels = dayLevels))]
imputedActivity1
imputedActivity2<-imputedActivity1[, `:=`(dayType, factor(weekLevels[dayOfWeek]))]
imputedActivity2
imputedActivity<-imputedActivity[, `:=`(dayOfWeek, factor(weekdays(date), levels = dayLevels))]
imputedActivity<-imputedActivity[, `:=`(dayType, factor(weekLevels[dayOfWeek]))]
imputedActivity[, .N, list(dayType, dayOfWeek)]
message(sprintf("Is dayOfWeek a factor? %s. Is dayType a factor? %s", is.factor(dt$dayOfWeek),
is.factor(dt$dayType)))
dayLevels<-c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",   "Saturday")
weekLevels<-c("Weekend", rep("Weekday", 5), "Weekend")
imputedActivity<-imputedActivity[, `:=`(dayOfWeek, factor(weekdays(date), levels = dayLevels))]
imputedActivity<-imputedActivity[, `:=`(dayType, factor(weekLevels[dayOfWeek]))]
imputedActivity[, .N, list(dayType, dayOfWeek)]
is.factor(dt$dayOfWeek)
ADTIntervalsImputed<-imputedActivity[, list(meanSteps = mean(steps, na.rm = TRUE)), list(dayType, interval)]
ADTIntervalsImputed
ggplot(ADTIntervalsImputed,aes(x=interval,y=meanSteps,color=dayType)+ geom_line() +
facet_wrap(~dayType, nrow = 2) + theme(legend.position = "none")
)
ggplot(ADTIntervalsImputed,aes(x=interval,y=meanSteps,color=dayType))+ geom_line() +
facet_wrap(~dayType, nrow = 2) + theme(legend.position = "none")
ggplot(ADTIntervalsImputed,aes(x=interval,y=meanSteps,color=dayType))+ geom_line()
getwd()
library(knitr)
setwd("C:/Users/SUPER JG/Documents/Coursera Data Science/ReproducibleResearch/Peer assessment 1/")
getwd()
knit2html("PA1_template.Rmd")
